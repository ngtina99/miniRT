**********************************************************
1. check in libft and miniRT makfile CFLAGS (I comment out on my own PC, because it is not compatible)
2. make sure to submit ALL libraries including minilibx

3. I don't understand why the 0.0f set up to {0.0f, 0.0f, -1.0f}; - to discuss in person
Yulia: this was to make it return something if it's (0,0,0) vector (which is not really a vector), not to devide by 0 in the next steps.
I chose this value as "default view", as if user is standing and looking right at the screen (-z axis)

t_vec3d	normalize(t_vec3d v)
{
	float magnitude;

	magnitude = sqrtf(v.x * v.x + v.y * v.y + v.z * v.z);
	if (magnitude == 0.0f) //TODO
		return (t_vec3d){0.0f, 0.0f, -1.0f};
	v.x /= magnitude;
	v.y /= magnitude;
	v.z /= magnitude;
	return (v);
}

4. 	t_vec3d closest_hit_point; // TODO is it needed later?
we are using it in find_closest_object to write value that we got. I think we will need later, if not - can remove. 

TODO:
1. add examples (Tina to start, Yulia also)
2. DONE: check that the program returns an error and exits properly when the configuration file 
is misconfigured or if the filename doesn't end with the `.rt` extension.
3. norminette: find_closest object (it would be better together - Tina, rest is DONE)
4. DONE: parsing: start norminette Yulia.
5. parsing corner cases (both of us)
6. DONE: check all TODO in code
7. DONE: remove all printing for parsing params
8. DONE: check for marvin in headers
9. maybe we can print errors to STD_ERR fd? then we can't show colors, but it will be more correct (it means changing printf to perror and/or ft_putstr_fd. 
	If it's system failor, like malloc failed - perror will be good, if it's us who throw error (like wrong extention, or incorrect format) perror won't work and we have to use ft_putstr_fd. 
	I can explain more in person
10. add all flags to makefile -Wall -Werror -Wextra + maybe O3 flag?
11. check EPSILON values (and some places in code with small values). Try different to have better picture (Yulia)
12. try empty .rt with valgrind to make 
***NEW*** -  19 Nov
13. norminette line too long fix you have to do enter and use \ this sign before the enter for norminette to accept when you split a too long line
14. check the cleanup/error.c (main.c and open.rt error messages) (STDERR?)
15. check parser corner cases especially with valgrind https://42-cursus.gitbook.io/guide/rank-04/minirt/building-the-thing
***new branch name: commented_miniRT - Tina


NORMINETTE LEFT (except comments):
1. init_file (too long lines, but maybe we can printout to STD_ERR instead. also text itself can go to .h file)
2. find_closest.C (to do together)
3. ray_trace.C (to do together)

**********
SOLVED JUST TO CHECK THIS TYPE OF MISTAKES
valgrind ./miniRT yulia
==3585== Memcheck, a memory error detector
==3585== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==3585== Using Valgrind-3.22.0 and LibVEX; rerun with -h for copyright info
==3585== Command: ./miniRT yulia
==3585==
Error: input not an existing .rt file
==3585==
==3585== HEAP SUMMARY:
==3585==     in use at exit: 15 bytes in 1 blocks
==3585==   total heap usage: 5 allocs, 4 frees, 1,159 bytes allocated
==3585==
==3585== LEAK SUMMARY:
==3585==    definitely lost: 15 bytes in 1 blocks
==3585==    indirectly lost: 0 bytes in 0 blocks
==3585==      possibly lost: 0 bytes in 0 blocks
==3585==    still reachable: 0 bytes in 0 blocks
==3585==         suppressed: 0 bytes in 0 blocks
==3585== Rerun with --leak-check=full to see details of leaked memory
==3585==
==3585== For lists of detected and suppressed errors, rerun with: -s
==3585== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
***********
**********************
ngtina1999@ngtina1999:/mnt/c/Users/ngtin/miniRT$ ./miniRT ./scenes/good_example3.rt
Error: input is not an existing .rt                     file path or the file can't be opened
*********************